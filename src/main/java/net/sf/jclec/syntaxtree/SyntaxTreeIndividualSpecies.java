package net.sf.jclec.syntaxtree;

import net.sf.jclec.IConfigure;
import net.sf.jclec.util.grammar.GrammarParser;

import java.io.FileNotFoundException;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.lang.builder.EqualsBuilder;

/**
 * Species for SyntaxTreeIndividual.
 * 
 * @author Sebastian Ventura
 */

public class SyntaxTreeIndividualSpecies extends SyntaxTreeSpecies implements IConfigure 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -5659464424179862147L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	public SyntaxTreeIndividualSpecies() 
	{
		super();
		genotypeSchema = new SyntaxTreeSchema();
	}

	/////////////////////////////////////////////////////////////////
	// ------------------------------- Setting and getting properties
	/////////////////////////////////////////////////////////////////

	// Setting properties
	
	/**
	 * Set the name of the root symbol 
	 * 
	 * @param rootSymbolName Root symbol name
	 */
	
	public void setRootSymbol(String rootSymbolName)
	{
		genotypeSchema.setRootSymbol(rootSymbolName);
	}
		
	/**
	 * Set terminal symbols for this grammar.
	 * 
	 * @param terminals Terminal symbols
	 */
		
	public void setTerminals(TerminalNode [] terminals)
	{
		genotypeSchema.setTerminals(terminals);
	}
		
	/**
	 * Set non-terminal symbols for this grammar.
	 * 
	 * @param nonTerminals Nonterminal symbols
	 */
		
	public void setNonTerminals(NonTerminalNode [] nonTerminals)
	{
		genotypeSchema.setNonTerminals(nonTerminals);
	}
		
	/**
	 * Set the maximum derivation size for this schema.
	 * 
	 * @param maxDerivSize Maximum of derivations 
	 */
		
	public void setMaxDerivSize(int maxDerivSize) 
	{
		genotypeSchema.setMaxDerivSize(maxDerivSize);
	}

	/////////////////////////////////////////////////////////////////
	// ---------------------- Implementing ISyntaxTreeSpecies methods
	/////////////////////////////////////////////////////////////////

	/**
	 * Creates a SyntaxTreeIndividual
	 * 
	 * @return new SyntaxTreeIndividual individual
	 */
	
	public SyntaxTreeIndividual createIndividual() 
	{
		return new SyntaxTreeIndividual();
	}

	/**
	 * {@inheritDoc}
	 */
	
	public SyntaxTreeIndividual createIndividual(SyntaxTree genotype) 
	{
		return new SyntaxTreeIndividual(genotype);
	}

	/**
	 * Configuration method.
	 * 
	 * Configuration parameters for this species are...
	 */
		
	public void configure(Configuration settings) 
	{
		GrammarParser gp = new GrammarParser();
		TerminalNode [] terminals;
		try {
			// Get the file where the grammar is located
			String bnfFile = settings.getString("grammar-file");
			// Get the file where the code of the terminal nodes is located
			String codeFile = settings.getString("code-file");
			// Get the non terminal nodes and set to the genotype
			setNonTerminals(gp.getNonTerminals(bnfFile));
			// Get the root symbol and set to the genotype
			setRootSymbol(gp.getRootNode(bnfFile));
			// Get all the terminals node
			terminals = gp.getTerminals(bnfFile);
			// Set the code to the list of terminals and set them to the genotype
			terminals = gp.setTerminalsCode(codeFile, terminals);
			setTerminals(terminals);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.exit(0);
		}

		// Get max-tree-depth
		int maxDerivSize = settings.getInt("max-deriv-size");
		setMaxDerivSize(maxDerivSize);
	}
	
	/////////////////////////////////////////////////////////////////
	// ------------------------- Overwriting java.lang.Object methods
	/////////////////////////////////////////////////////////////////
	
	public boolean equals(Object other)
	{
		if (other instanceof SyntaxTreeIndividualSpecies) {
			// Type conversion
			SyntaxTreeIndividualSpecies cother = (SyntaxTreeIndividualSpecies) other;
			// Performs comparison
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(genotypeSchema, cother.genotypeSchema);
			// Return comparison result
			return eb.isEquals();
		}
		else {
			return false;
		}
	}
}
