package net.sf.jclec.ge.cre;

import java.util.ArrayList;
import java.util.List;

import net.sf.jclec.IIndividual;
import net.sf.jclec.ISpecies;
import net.sf.jclec.ge.GECreator;
import net.sf.jclec.ge.GEIndividual;
import net.sf.jclec.ge.GESpecies;

/**
 * GEIndividual creator which maps the phenotype with the ramped half-and-half method.
 * 
 * @author Rafael Barbudo Lunar
 */

public class RampedHalfAndHalf extends GECreator 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -2889517912372790322L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	
	public RampedHalfAndHalf()
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	@Override
	protected void createNext() 
	{
		String rootSymbol = schema.getRootSymbol();
		int [] newGenotype = createGenotype();
		GEIndividual newInd = new GEIndividual(newGenotype);
		
		if(randgen.coin())
			schema.grow(newInd, rootSymbol, 0, 0);
		else
			schema.full(newInd, rootSymbol, 0, 0);

		// Add the new individual
		createdBuffer.add(newInd);
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * This method creates the initial population with the ramped half-and-half method
	 * 
	 * @param numberOfIndividuals The number of individual we want to create
	 * 
	 * @return a list which contains the individuals created 
	 * 
	 */
	
	public List<IIndividual> provide(int numberOfIndividuals) 
	{
		// Prepare process
		prepareCreation();
		GEIndividual newInd = null;
		// Set numberOfIndividuals
		this.numberOfIndividuals = numberOfIndividuals;
		// Result list
		createdBuffer = new ArrayList<IIndividual> (numberOfIndividuals);
		// Get the original max depth
		int maxDepth = schema.getMaxDerivSize();
		// Get the number of individuals for each group and the rest too
		int nOfIndividualGroup = numberOfIndividuals/(schema.getMaxDerivSize()-1);
		int restOfIndividuals = numberOfIndividuals%(schema.getMaxDerivSize()-1);
		// Get the root symbol
		String rootSymbol = schema.getRootSymbol();
		
		for(int i=2; i<maxDepth; i++)
		{
			schema.setMaxDerivSize(i);
			for(int j=0; j<nOfIndividualGroup;j++)
			{
				newInd = new GEIndividual(createGenotype());
				if(randgen.coin())
					schema.grow(newInd, rootSymbol, 0, 0);
				else
					schema.full(newInd, rootSymbol, 0, 0);
				createdBuffer.add(newInd);
			}
		}
		
		// Assign the rest of the individuals
		for(int i=restOfIndividuals; i>0; i--)
		{
			schema.setMaxDerivSize(i);
			if(randgen.coin())
				schema.grow(newInd, rootSymbol, 0, 0);
			else
				schema.full(newInd, rootSymbol, 0, 0);
			createdBuffer.add(newInd);
		}
				
		schema.setMaxDerivSize(maxDepth);
		return createdBuffer;
	}
	
	@Override
	public GEIndividual createIndividual(int[] genotype) 
	{
		GEIndividual newInd = new GEIndividual(genotype);		
		String rootSymbol = schema.getRootSymbol();
		
		if(randgen.coin())
			schema.grow(newInd, rootSymbol, 0, 0);
		else
			schema.full(newInd, rootSymbol, 0, 0);

		return newInd;	
	}

}
