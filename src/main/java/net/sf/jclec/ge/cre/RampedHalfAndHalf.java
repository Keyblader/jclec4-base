package net.sf.jclec.ge.cre;

import java.util.List;

import net.sf.jclec.IIndividual;
import net.sf.jclec.ge.GECreator;
import net.sf.jclec.ge.GEIndividual;

/**
 * GEIndividual creator which maps the phenotype with the ramped half-and-half method.
 * 
 * @author Rafael Barbudo Lunar
 */

public class RampedHalfAndHalf extends GECreator 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -2889517912372790322L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	
	public RampedHalfAndHalf()
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	@Override
	protected void createNext() 
	{
		String rootSymbol = schema.getRootSymbol();
		int [] newGenotype = createGenotype();
		GEIndividual newInd = new GEIndividual(newGenotype);
		
		if(randgen.coin())
			schema.grow(newInd, rootSymbol, 0, 0);
		else
			schema.full(newInd, rootSymbol, 0, 0);

		// Add the new individual
		createdBuffer.add(newInd);
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * This method creates the initial population with the ramped half-and-half method
	 * 
	 * @param numberOfIndividuals The number of individual we want to create
	 * 
	 * @return a list which contains the individuals created 
	 * 
	 */
	
	public List<IIndividual> provide(int numberOfIndividuals) 
	{
		int nOfGroups = schema.getMaxDerivSize()-1;
		
		// TODO Auto-generated method stub
		// TODO Modificar la profundidad maxima del esquema y devolverle su valor inicial al finalizar el metodo
		return null;
	}
	
	@Override
	public GEIndividual createIndividual(int[] genotype) 
	{
		GEIndividual newInd = new GEIndividual(genotype);		
		String rootSymbol = schema.getRootSymbol();
		
		if(randgen.coin())
			schema.grow(newInd, rootSymbol, 0, 0);
		else
			schema.full(newInd, rootSymbol, 0, 0);

		return newInd;	
	}

}
